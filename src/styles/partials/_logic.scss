/* ---------------------------------
logic
--------------------------------- */

/* ---------------------------------
resets & placeholders
--------------------------------- */

%globals {
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }
}

%typography {
  font-size: 62.5%;

  body {
    font-family: "Helvetica, Arial", sans-serif;
    font-size: 1.6rem;
  }
}

%bottomFooter {
  display: flex;
  flex-flow: column nowrap;
  min-height: 100vh;

  main {
    flex-grow: 1;
  }
}

%setBorderBox {
  box-sizing: border-box;
}

%setBody {
  display: flex;
  flex-flow: column nowrap;
  min-height: 100vh;
  // font-size: 62.5%;
}

// % { flex-grow: 1; }

%specialTextPad {
  padding: 0.1em 0.2em;
}

%resetAnchors {
  text-decoration: none;
  color: inherit;
}

%resetButtons {
  background-color: transparent;
  border: none;
  outline: none;
}

/* ---------------------------------
functions & mixins
--------------------------------- */

@function calcContWidth($nCol) {
  $pad: 40;
  $colWidth: 300;
  $colGut: 20;

  @if $nCol == 1 {
    @return ($colWidth + $pad) * 1px;
  } @else {
    @return (($colWidth * $nCol) + ($colGut * ($nCol - 1)) + $pad) * 1px;
  }
}

@function rel($t, $c: 16, $u: "rem") {
  @return ($t / $c) * 1#{$u};
}

@function emCalc($target, $context: 10) {
  // ref: https://stackoverflow.com/questions/13905407/append-unit-type-to-the-result-of-a-calculation
  @return ($target / $context) * 1em;
}

// initializes the stylesheet
// w/ the selected placeholders
@mixin init($bf: false, $t: true) {
  :root {
    @extend %globals;
    @if ($t) {
      @extend %typography;
    }
  }

  body {
    @if ($bf) {
      @extend %bottomFooter;
    }
  }
}

// reset margin and padding
// should rename this to 'setBox',
// and include emCalc()
@mixin resetBox($pad: 0, $mar: 0, $isList: false) {
  padding: $pad;
  margin: $mar;
  @if $isList {
    list-style: none;
  }
}

// should replace prev, watch for broken includes
@mixin setBox($pad: 0, $mar: 0, $isList: false) {
  padding: $pad;
  margin: $mar;
  @if $isList {
    list-style: none;
  }
}

@mixin setBorder($width, $style, $color, $side: "", $radius: 0) {
  border#{'-' + $side}: $width $style $color;
  @if $radius != 0 {
    border-radius: $radius;
  }
}

// set font properties
// add line-height
// add default font-size?
@mixin setFonts(
  $size,
  $family: $base-font,
  $color: $font-color-dark,
  $alignment: left,
  $weight: 400
) {
  font-family: $family;
  font-weight: $weight;
  font-size: emCalc($size);
  text-align: $alignment;
  color: $color;
}

// set flexbox properties
@mixin setFlexbox($flow, $justify, $align) {
  display: flex;
  flex-flow: $flow;
  justify-content: $justify;
  align-items: $align;
}

// sets flexbox properties
@mixin flex($direction, $justify, $align, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  justify-content: $justify;
  align-items: $align;
}

// creates a centered container
// of the desired width
@mixin container($w) {
  display: block;
  max-width: $w;
  margin: 0 auto;
}

@mixin slideFoundation($transition: true) {
  position: fixed;
  width: 100vw;
  height: 100vh;

  @if $transition {
    top: 0;
    left: 1000px;
    bottom: 0;
    transition: transform, 0.3s ease;
  }
}

/* ---------------------------------
other
--------------------------------- */

// debugging
$debugMode: false;

* {
  @if $debugMode {
    outline: 1px solid $purple;
  }
}
